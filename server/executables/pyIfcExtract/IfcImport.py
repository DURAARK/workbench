# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IfcImport', [dirname(__file__)])
        except ImportError:
            import _IfcImport
            return _IfcImport
        if fp is not None:
            try:
                _mod = imp.load_module('_IfcImport', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _IfcImport = swig_import_helper()
    del swig_import_helper
else:
    import _IfcImport
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IfcImport.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _IfcImport.SwigPyIterator_value(self)
    def incr(self, n=1): return _IfcImport.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _IfcImport.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _IfcImport.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _IfcImport.SwigPyIterator_equal(self, *args)
    def copy(self): return _IfcImport.SwigPyIterator_copy(self)
    def next(self): return _IfcImport.SwigPyIterator_next(self)
    def __next__(self): return _IfcImport.SwigPyIterator___next__(self)
    def previous(self): return _IfcImport.SwigPyIterator_previous(self)
    def advance(self, *args): return _IfcImport.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _IfcImport.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _IfcImport.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _IfcImport.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _IfcImport.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _IfcImport.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _IfcImport.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _IfcImport.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Entity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Entity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Entity, name)
    def __init__(self, *args): 
        this = _IfcImport.new_Entity(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_a(self, *args): return _IfcImport.Entity_is_a(self, *args)
    def get_argument_count(self): return _IfcImport.Entity_get_argument_count(self)
    def get_argument_type(self, *args): return _IfcImport.Entity_get_argument_type(self, *args)
    def get_argument_name(self, *args): return _IfcImport.Entity_get_argument_name(self, *args)
    def get_argument_index(self, *args): return _IfcImport.Entity_get_argument_index(self, *args)
    def get_inverse(self, *args): return _IfcImport.Entity_get_inverse(self, *args)
    def _set_argument(self, *args): return _IfcImport.Entity__set_argument(self, *args)
    def __repr__(self): return _IfcImport.Entity___repr__(self)
    def get_argument(self, *args): return _IfcImport.Entity_get_argument(self, *args)
    def is_valid(self): return _IfcImport.Entity_is_valid(self)
    set_argument = lambda self,x,y: self._set_argument(x) if y is None else self._set_argument(x,y)

    __swig_destroy__ = _IfcImport.delete_Entity
    __del__ = lambda self : None;
Entity_swigregister = _IfcImport.Entity_swigregister
Entity_swigregister(Entity)

class IfcFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IfcFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IfcFile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["file"] = _IfcImport.IfcFile_file_set
    __swig_getmethods__["file"] = _IfcImport.IfcFile_file_get
    if _newclass:file = _swig_property(_IfcImport.IfcFile_file_get, _IfcImport.IfcFile_file_set)
    __swig_setmethods__["tokens"] = _IfcImport.IfcFile_tokens_set
    __swig_getmethods__["tokens"] = _IfcImport.IfcFile_tokens_get
    if _newclass:tokens = _swig_property(_IfcImport.IfcFile_tokens_get, _IfcImport.IfcFile_tokens_set)
    def by_type(self, *args): return _IfcImport.IfcFile_by_type(self, *args)
    def __init__(self): 
        this = _IfcImport.new_IfcFile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IfcImport.delete_IfcFile
    __del__ = lambda self : None;
    def by_id(self, *args): return _IfcImport.IfcFile_by_id(self, *args)
    def by_guid(self, *args): return _IfcImport.IfcFile_by_guid(self, *args)
    def add(self, *args): return _IfcImport.IfcFile_add(self, *args)
    def write(self, *args): return _IfcImport.IfcFile_write(self, *args)
IfcFile_swigregister = _IfcImport.IfcFile_swigregister
IfcFile_swigregister(IfcFile)


def open(*args):
  return _IfcImport.open(*args)
open = _IfcImport.open

def create_shape(*args):
  return _IfcImport.create_shape(*args)
create_shape = _IfcImport.create_shape

def clean():
  return _IfcImport.clean()
clean = _IfcImport.clean
class Ints(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ints, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ints, name)
    __repr__ = _swig_repr
    def iterator(self): return _IfcImport.Ints_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _IfcImport.Ints___nonzero__(self)
    def __bool__(self): return _IfcImport.Ints___bool__(self)
    def __len__(self): return _IfcImport.Ints___len__(self)
    def pop(self): return _IfcImport.Ints_pop(self)
    def __getslice__(self, *args): return _IfcImport.Ints___getslice__(self, *args)
    def __setslice__(self, *args): return _IfcImport.Ints___setslice__(self, *args)
    def __delslice__(self, *args): return _IfcImport.Ints___delslice__(self, *args)
    def __delitem__(self, *args): return _IfcImport.Ints___delitem__(self, *args)
    def __getitem__(self, *args): return _IfcImport.Ints___getitem__(self, *args)
    def __setitem__(self, *args): return _IfcImport.Ints___setitem__(self, *args)
    def append(self, *args): return _IfcImport.Ints_append(self, *args)
    def empty(self): return _IfcImport.Ints_empty(self)
    def size(self): return _IfcImport.Ints_size(self)
    def clear(self): return _IfcImport.Ints_clear(self)
    def swap(self, *args): return _IfcImport.Ints_swap(self, *args)
    def get_allocator(self): return _IfcImport.Ints_get_allocator(self)
    def begin(self): return _IfcImport.Ints_begin(self)
    def end(self): return _IfcImport.Ints_end(self)
    def rbegin(self): return _IfcImport.Ints_rbegin(self)
    def rend(self): return _IfcImport.Ints_rend(self)
    def pop_back(self): return _IfcImport.Ints_pop_back(self)
    def erase(self, *args): return _IfcImport.Ints_erase(self, *args)
    def __init__(self, *args): 
        this = _IfcImport.new_Ints(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _IfcImport.Ints_push_back(self, *args)
    def front(self): return _IfcImport.Ints_front(self)
    def back(self): return _IfcImport.Ints_back(self)
    def assign(self, *args): return _IfcImport.Ints_assign(self, *args)
    def resize(self, *args): return _IfcImport.Ints_resize(self, *args)
    def insert(self, *args): return _IfcImport.Ints_insert(self, *args)
    def reserve(self, *args): return _IfcImport.Ints_reserve(self, *args)
    def capacity(self): return _IfcImport.Ints_capacity(self)
    __swig_destroy__ = _IfcImport.delete_Ints
    __del__ = lambda self : None;
Ints_swigregister = _IfcImport.Ints_swigregister
Ints_swigregister(Ints)
cvar = _IfcImport.cvar
DISABLE_OPENING_SUBTRACTIONS = cvar.DISABLE_OPENING_SUBTRACTIONS
DISABLE_OBJECT_PLACEMENT = cvar.DISABLE_OBJECT_PLACEMENT

class Doubles(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Doubles, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Doubles, name)
    __repr__ = _swig_repr
    def iterator(self): return _IfcImport.Doubles_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _IfcImport.Doubles___nonzero__(self)
    def __bool__(self): return _IfcImport.Doubles___bool__(self)
    def __len__(self): return _IfcImport.Doubles___len__(self)
    def pop(self): return _IfcImport.Doubles_pop(self)
    def __getslice__(self, *args): return _IfcImport.Doubles___getslice__(self, *args)
    def __setslice__(self, *args): return _IfcImport.Doubles___setslice__(self, *args)
    def __delslice__(self, *args): return _IfcImport.Doubles___delslice__(self, *args)
    def __delitem__(self, *args): return _IfcImport.Doubles___delitem__(self, *args)
    def __getitem__(self, *args): return _IfcImport.Doubles___getitem__(self, *args)
    def __setitem__(self, *args): return _IfcImport.Doubles___setitem__(self, *args)
    def append(self, *args): return _IfcImport.Doubles_append(self, *args)
    def empty(self): return _IfcImport.Doubles_empty(self)
    def size(self): return _IfcImport.Doubles_size(self)
    def clear(self): return _IfcImport.Doubles_clear(self)
    def swap(self, *args): return _IfcImport.Doubles_swap(self, *args)
    def get_allocator(self): return _IfcImport.Doubles_get_allocator(self)
    def begin(self): return _IfcImport.Doubles_begin(self)
    def end(self): return _IfcImport.Doubles_end(self)
    def rbegin(self): return _IfcImport.Doubles_rbegin(self)
    def rend(self): return _IfcImport.Doubles_rend(self)
    def pop_back(self): return _IfcImport.Doubles_pop_back(self)
    def erase(self, *args): return _IfcImport.Doubles_erase(self, *args)
    def __init__(self, *args): 
        this = _IfcImport.new_Doubles(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _IfcImport.Doubles_push_back(self, *args)
    def front(self): return _IfcImport.Doubles_front(self)
    def back(self): return _IfcImport.Doubles_back(self)
    def assign(self, *args): return _IfcImport.Doubles_assign(self, *args)
    def resize(self, *args): return _IfcImport.Doubles_resize(self, *args)
    def insert(self, *args): return _IfcImport.Doubles_insert(self, *args)
    def reserve(self, *args): return _IfcImport.Doubles_reserve(self, *args)
    def capacity(self): return _IfcImport.Doubles_capacity(self)
    __swig_destroy__ = _IfcImport.delete_Doubles
    __del__ = lambda self : None;
Doubles_swigregister = _IfcImport.Doubles_swigregister
Doubles_swigregister(Doubles)

class Strings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Strings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Strings, name)
    __repr__ = _swig_repr
    def iterator(self): return _IfcImport.Strings_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _IfcImport.Strings___nonzero__(self)
    def __bool__(self): return _IfcImport.Strings___bool__(self)
    def __len__(self): return _IfcImport.Strings___len__(self)
    def pop(self): return _IfcImport.Strings_pop(self)
    def __getslice__(self, *args): return _IfcImport.Strings___getslice__(self, *args)
    def __setslice__(self, *args): return _IfcImport.Strings___setslice__(self, *args)
    def __delslice__(self, *args): return _IfcImport.Strings___delslice__(self, *args)
    def __delitem__(self, *args): return _IfcImport.Strings___delitem__(self, *args)
    def __getitem__(self, *args): return _IfcImport.Strings___getitem__(self, *args)
    def __setitem__(self, *args): return _IfcImport.Strings___setitem__(self, *args)
    def append(self, *args): return _IfcImport.Strings_append(self, *args)
    def empty(self): return _IfcImport.Strings_empty(self)
    def size(self): return _IfcImport.Strings_size(self)
    def clear(self): return _IfcImport.Strings_clear(self)
    def swap(self, *args): return _IfcImport.Strings_swap(self, *args)
    def get_allocator(self): return _IfcImport.Strings_get_allocator(self)
    def begin(self): return _IfcImport.Strings_begin(self)
    def end(self): return _IfcImport.Strings_end(self)
    def rbegin(self): return _IfcImport.Strings_rbegin(self)
    def rend(self): return _IfcImport.Strings_rend(self)
    def pop_back(self): return _IfcImport.Strings_pop_back(self)
    def erase(self, *args): return _IfcImport.Strings_erase(self, *args)
    def __init__(self, *args): 
        this = _IfcImport.new_Strings(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _IfcImport.Strings_push_back(self, *args)
    def front(self): return _IfcImport.Strings_front(self)
    def back(self): return _IfcImport.Strings_back(self)
    def assign(self, *args): return _IfcImport.Strings_assign(self, *args)
    def resize(self, *args): return _IfcImport.Strings_resize(self, *args)
    def insert(self, *args): return _IfcImport.Strings_insert(self, *args)
    def reserve(self, *args): return _IfcImport.Strings_reserve(self, *args)
    def capacity(self): return _IfcImport.Strings_capacity(self)
    __swig_destroy__ = _IfcImport.delete_Strings
    __del__ = lambda self : None;
Strings_swigregister = _IfcImport.Strings_swigregister
Strings_swigregister(Strings)

# This file is compatible with both classic and new-style classes.


